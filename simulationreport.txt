Simulation Report: Implementing Lift Systems Using LOOK and SCAN Algorithms

Tests to run and their expected outputs:

1. Testing input.txt
How to run this test:
- For each program, when the user is asked to input a file, select input.txt. 
- Do not enter any new requests while the program is executing.
Expected results:

testing input.txt with SCAN 

starting at floor 1
direction of travel = up 

floor 1
picking up 2 passengers 
not dropping off any passengers 
passengers = [3, 5]
remaining capacity = 2
1: 
2: 4
3:
4: 1
5:

floor 2
picking up 1 passenger 
not dropping off any passengers 
passengers = [3, 5, 4]
remaining capacity = 1
1: 
2: 
3:
4: 1
5:

floor 3
not pciking up any passengers 
dropping off 1 passenger
passengers = [5, 4]
remaining capacity = 2
1: 
2: 
3:
4: 1
5:

floor 4
picking up 1 passenger 
dropping off 1 passenger 
passengers = [5, 1]
remaining capacity = 2
1: 
2: 
3:
4: 
5:

floor 5
not picking up any passengers 
dropping off 1 passenger 
passengers = [1]
remaining capacity = 3
1: 
2: 
3:
4: 
5:

top floor reached - lift should change direction to down

floor 4
not picking up or dropping off any passengers 
passengers = [1]
remaining capacity = 3
1: 
2:
3: 
4: 
5: 

floor 3
not picking up or dropping off any passengers 
passengers = [1]
remaining capacity = 3
1: 
2: 
3:
4: 
5:

floor 2
not picking up or dropping off any passengers 
passengers = [1]
remaining capacity = 3
1: 
2: 
3:
4: 
5:

floor 1
not picking up any passengers 
dropping off 1 passenger
passengers = [] 
remaining capacity = 4
1: 
2: 
3:
4: 
5:

No more requests and  no more passengers  on board - program should stop 
(note: the variable used to store the direction the lift is travelling in might change to up before the program stops - I'm (Livi) not sure about the implementation. It doesn't really matter either way.)

Testing input.txt with LOOK

Results should be identical to SCAN algorithm, except the program should check at each floor whether there are any remaining requests for floors above/below the current floor (based on the direction of travel).

Testing input.txt with MYLIFT

Starting at bottom floor (floor 1)

floor 1:
picking up 2 passengers
not dropping off any passengers
passengers = [3,5]
remaining capacity = 2
1: 
2: 4
3:
4: 1
5:

floor 2:
picking up 1 passenger
not dropping off any passengers
passengers = [3,5,4]
remaining capacity = 1
1: 
2: 
3:
4: 1
5:

floor 3:
not picking up any passengers 
dropping off 1 passenger
passengers = [5,4]
remaining capacity = 2
1: 
2: 
3:
4: 1
5:

floor 4:
not picking up the passenger, as the direction he wants to go in does not correspond to the current direction of travel of the lift
dropping off 1 passenger
passengers = [5]
remaining capacity = 3
1: 
2: 
3:
4: 1
5:

floor 5:
not picking up any passengers
dropping off 1 passenger
passengers = []
remaining capacity = 4
1: 
2: 
3:
4: 1
5:

changing direction 

floor 4
now we can pick up the passenger, as now the direction of the lift corresponds to the direction that he wants to go in 
not dropping off any passengers 
passengers = [1]
remaining capacity = 3
1: 
2: 
3:
4: 
5:

floor 3:
not dropping off/picking up any passengers
passengers  = [1]
remaining capacity = 3
1: 
2: 
3:
4: 
5:

floor 2:
not dropping off/picking up any passengers
passengers  = [1]
remaining capacity = 3
1: 
2: 
3:
4: 
5:

floor 1:
dropping off 1 passenger
not picking up any passengers
passengers  = []
remaining capacity = 4
not dropping off/picking up any passengers
passengers  = [1]
remaining capacity = 3
1: 
2: 
3:
4: 
5:

no more requests to service, program stops

2. Testing input2.txt
How to run this test:
- For each program, when the user is asked to input a file, select input2.txt.
- Do not enter any new requests while the program is executing.

Expected results:
testing input2.txt with SCAN 

Starting at floor 1
Lift traveling up 

floor 1
picking up both passengers 
passengers = [4, 6]
remaining capacity = 3
Requests:
1: []
2: 3, 5, 7
3: 8
4: 2, 5
5: 6, 1
6: 7
7: 4, 2
8: 3

floor 2
picking up all 3 passengers 
passengers = [4, 6, 3, 5, 7]
remaining capacity = 0
1: []
2: []
3: 8
4: 2, 5
5: 6, 1
6: 7
7: 4, 2
8: 3

floor 3
dropping off 1 passenger 
picking up passenger 
passengers = [4, 6, 5, 7, 8]
remaining capacity = 0
1: []
2: []
3: []
4: 2, 5
5: 6, 1
6: 7
7: 4, 2
8: 3

floor 4
dropping off 1 passenger 
picking up 1st passenger only due to capacity limits 
passengers = [6, 5, 7, 8, 2]
remaining capacity = 0
1: []
2: []
3: []
4: 5
5: 6, 1
6: 7
7: 4, 2
8: 3

floor 5
dropping off 1 passenger 
picking up 1 passenger
passengers = [6, 7, 8, 2, 6]
remaining capacity = 0
1: []
2: []
3: []
4: 5
5: 1
6: 7
7: 4, 2
8: 3

floor 6
dropping off 2 passengers 
picking up 1 passenger 
passengers = [7, 8, 2, 7]
remaining capacity = 1
1: []
2: []
3: []
4: 5
5: 1
6: []
7: 4, 2
8: 3

floor 7 
dropping off 2 passengers 
picking up 2 passengers 
passengers = [8, 2, 4, 2]
remaining capacity = 1
1: []
2: []
3: []
4: 5
5: 1
6: []
7: []
8: 3

floor 8 
dropping off 1 passenger 
picking up 1 passenger 
passengers  = [2, 4, 2, 3]
remaining capacity = 1
1: []
2: []
3: []
4: 5
5: 1
6: []
7: []
8: []

top floor reached - changing direction to down 

floor 7
no passengers dropped off or picked up 

floor 6
no passengers dropped off or picked up 

floor 5
no passengers dropped off 
picking up 1 passenger 
passengers = [2, 4, 2, 3, 1]
remaning capacity = 0
1: []
2: []
3: []
4: 5
5: []
6: []
7: []
8: []

floor 4
dropping off 1 passenger 
picking up 1 passenger 
passengers = [2, 2, 3, 1, 5]
remaining capacity = 0
1: []
2: []
3: []
4: 5
5: []
6: []
7: []
8: []

floor 3 
no passengers picked up 
dropping off 1 passenger 
passengers = [2, 2, 1, 5]
remaining capacity = 1
1: []
2: []
3: []
4: 5
5: []
6: []
7: []
8: []

floor 2
no passengers picked up 
dropping off 2 passengers 
passengers = [1, 5]
remaining capacity = 3
1: []
2: []
3: []
4: 5
5: []
6: []
7: []
8: []

floor 1
no passengers picked up 
dropping off 1 passenger 
passengers = [5]
remaining capacity = 4
1: []
2: []
3: []
4: 5
5: []
6: []
7: []
8: []

bottom floor reached - changing direction to up

floor 2
no passengers picked up or dropped off
passengers = [5]
remaining capacity = 4
1: []
2: []
3: []
4: 5
5: []
6: []
7: []
8: []

floor 3 
no passengers picked up or dropped off 
passengers = [5]
remaining capacity = 4
1: []
2: []
3: []
4: 5
5: []
6: []
7: []
8: []

floor 4
no passengers picked up or dropped off 
passengers  = [5]
remaining capacity = 4
1: []
2: []
3: []
4: 5
5: []
6: []
7: []
8: []

floor 5
no passengers picked up 
dropping off 1 passenger 
passengers = []
remaining capacity = 5
1: []
2: []
3: []
4: 5
5: []
6: []
7: []
8: []

No more requests or passengers on the lift - program should stop.

